name: CI/CD Pipeline

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false

jobs:
  terraform-and-app:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    env:
      AWS_REGION: us-east-1
      TFVARS_FILE: terraform.tfvars

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Debug - show directory contents
        run: ls -R

      - name: Set up Terraform
        run: |
          curl -o terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          unzip terraform.zip -d tfbin
          sudo mv tfbin/terraform /usr/local/bin/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Decode terraform.tfvars from secret
        run: echo "${{ secrets.TFVARS_BASE64 }}" | base64 -d > terraform.tfvars

      - name: Terraform Init
        run: terraform init

      - name: Terraform Format & Validate
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        run: terraform plan -var-file=${{ env.TFVARS_FILE }}

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve -var-file=${{ env.TFVARS_FILE }}

      - name: Build Docker Image for Flask App
        run: |
          docker build -t devops-flask-app ./app

      - name: Run Flask App Test
        run: |
          docker run -d -p 8080:8080 --name flask-app devops-flask-app
          sleep 10
          curl --fail http://localhost:8080/health
