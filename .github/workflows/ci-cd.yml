name: Terraform + Flask App CI/CD

on:
  push:
    branches: [main, dev, staging]
  pull_request:
    branches: [main, dev, staging]

env:
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  AWS_REGION: us-east-1
  TFVARS_FILE: terraform.tfvars

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Debug - list directory contents
        run: |
          echo "Current directory:"
          pwd
          echo "Repo structure:"
          ls -al
          ls -R terraform || echo "terraform/ folder missing"

      - name: Set up Terraform
        run: |
          rm -rf terraform.zip terraform
          curl -o terraform.zip https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
          unzip -o terraform.zip
          sudo mv terraform /usr/local/bin/

      - name: Configure AWS Credentials
        run: |
          aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID }}"
          aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          aws configure set default.region "${{ env.AWS_REGION }}"

      - name: Decode terraform.tfvars from secret
        run: |
          echo "${{ secrets.TFVARS_BASE64 }}" | base64 -d > terraform/${{ env.TFVARS_FILE }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Format & Validate
        working-directory: terraform
        run: |
          terraform fmt -check
          terraform validate

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var-file=${{ env.TFVARS_FILE }}

      - name: Terraform Apply (main only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: terraform
        run: terraform apply -auto-approve -var-file=${{ env.TFVARS_FILE }}

      - name: Build Docker Image for Flask App
        run: docker build -t flask-app ./app

      - name: Run Flask App Test
        run: |
          docker run --rm -d -p 8080:8080 --name test-app flask-app
          sleep 5
          curl -f http://localhost:8080/ || (echo "App failed health check" && exit 1)
          docker stop test-app
